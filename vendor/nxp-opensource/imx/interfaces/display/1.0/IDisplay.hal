/*
 * Copyright (C) 2016 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package nxp.hardware.display@1.0;

interface IDisplay {
    /**
     *  get free layer from display.
     *
     * @param count is the buffer count.
     * @return error is NONE upon success. Otherwise,
     *         NO_RESOURCES when there is no free layer.
     * @return layer is the index of acquired layer.
     */
    @entry
    @exit
    @callflow(next="*")
    getLayer(uint32_t count) generates (Error error, uint32_t layer);

    /**
     *  put layer back to display.
     *
     * @param layer is the layer from display.
     * @return error is NONE upon success. Otherwise,
     *         NO_RESOURCES when there is no free layer.
     */
    @entry
    @exit
    @callflow(next="*")
    putLayer(uint32_t layer) generates (Error error);

    /**
     *  get free buffer slot from layer.
     *
     * @param layer is the layer from display.
     * @return error is NONE upon success. Otherwise,
     *         NO_RESOURCES when there is no free layer.
     * @return slot is the index of buffer slot.
     */
    @entry
    @exit
    @callflow(next="*")
    getSlot(uint32_t layer) generates (Error error, uint32_t slot);

    /**
     *  present layer to display.
     *
     * @param layer is the layer which hold buffer.
     * @param slot is the buffer index.
     * @param buffer is the layer content to present.
     * @return error is NONE upon success. Otherwise,
     *         UNSUPPORTED .
     * @return stride is the number of pixels between two consecutive rows of
     *         the buffers, when the concept of consecutive rows is defined.
     *         Otherwise, it has no meaning.
     * @return buffers is an array of raw handles to the newly allocated
     *         buffers.
     */
    @entry
    @exit
    @callflow(next="*")
    presentLayer(uint32_t layer, uint32_t slot, handle buffer) generates (Error error);
};
